
docs_test = data.table::fread("C:/Users/JK137644/Desktop/DM2020_test_docs.txt", header = FALSE, sep = "\t", encoding = "UTF-8")

setnames(docs_test, c("doc_id", "text", "labels"))
docs_test[, text := gsub("[<][^<>]+[>]", "", text)]
docs_test[, text := gsub("[^[:alpha:]\']+", " ", text)]
myCorpus_2 = VCorpus(DataframeSource(docs),
                        readerControl = list(reader = readDataframe, language = "en"))
correctEnc = function(x) {
  stringr::str_replace_all(x,"[^[:graph:]]", " ")
}

# using custom transformers
myCorpus_2  = tm_map(myCorpus_2 , content_transformer(correctEnc))
myCorpus_2  = tm_map(myCorpus_2 , content_transformer(tolower))

# using 'standard' transformers (one-by-one)
myCorpus_2  = tm_map(myCorpus_2 , removeNumbers)
myCorpus_2  = tm_map(myCorpus_2 , removePunctuation)
myCorpus_2  = tm_map(myCorpus_2 , removeWords, stopwords())
myCorpus_2  = tm_map(myCorpus_2 , stemDocument)
myCorpus_2  = tm_map(myCorpus_2 , stripWhitespace)

DTM_3 = DocumentTermMatrix(myCorpus , 
                         control = list(bounds = list(global = c(250, 0.22*length(myCorpus ))),
                                        weighting = weightTfIdf)) 




inspect(DTM)[1:100,]
inspect(DTM_3)[1:100,]
head(inspect(DTM_test))
head(inspect(DTM_test_2))

#To stworzenia DTM_test potrzebujemy słów z DTM (wygenerowanego na zbiorze treningowym)
DTM_test_2 = DocumentTermMatrix(myCorpus_test, 
                              control = list(dictionary = DTM_3$dimnames$Terms,
                                             weighting = weightTfIdf)) 
rm(DTM_2)

############# LABELE NIE SY NAM DO NICZEGO POTRZEBNE!!!!!!!!!!!
#Teraz mo?na dokonywaa predykcji. Najpierw trzeba przygotowaa labele:
#labels = strsplit(docs_test[, labels], ",")
#labels = data.table(doc_id = rep(1:length(labels), times = sapply(labels, length)),
#                    label = unlist(labels))
#labels[, value := 1]
#labels = dcast(labels, doc_id ~ label, value.var = "value", fill = 0)
#labels[, doc_id := NULL]
#labels[, colnames(labels)[colSums(labels) < 100] := NULL]
#labels = as.matrix(labels)

#niepotrzebne
#val_idx = sort(sample(nrow(DTM_test), 10000))

library(knn.covertree)

DTMDense_3 = as.matrix(DTM_3)

DTMDense_test_2 = as.matrix(DTM_test_2)

knn_test = find_knn(data = DTMDense_2, k = 3, query = DTMDense_test_2, distance = c("cosine"))



save(knn_test_2,file="knn_test2_output.RData")
save(knn_test,file="knn_test_output.RData")


sum(apply(DTM_test,1,sum)==0)


dim(labels)#[1] 100000    236 słów 
dim(pred)
# prdyckje na podstawie knna 
knnIndex = knn_test_2$index
dim()
preds = apply(knnIndex, 1, function(x, labels) {pred = labels[x];
pred = apply(pred, 2, sum)}, labels)
preds = t(preds)
predicted_labels = apply(preds, 1, function(x) names(which(x >= 1)))

preds_sum3 = apply(knnIndex, 1, function(x, labels) {pred = labels[x];
pred = apply(pred, 2, sum)}, labels)
preds = t(preds)
predicted_labels = apply(preds, 1, function(x) names(which(x >= 1)))
predicted_labels
save(predicted_labels, 'knn_test_outpt_3.txt')
?writeLines
writeLines(lista_predicted_labels,'C:/Users/JK137644/Desktop/KNN_#_PREDICTED_LABELS.txt')
lista_predicted_labels <-as.list(predicted_labels)
library(data.table)
write.csv(lista_predicted_labels, file="C:/Users/JK137644/Desktop/KNN_#_PREDICTED_LABELS.txt")
data.table::fwrite(predicted_labels, file = 'C:/Users/JK137644/Desktop/KNN_#_PREDICTED_LABELS.txt') 

write.csv(predicted_labels, file="C:/Users/JK137644/Desktop/KNN_#_PREDICTED_LABELS.txt")
data.table::fwrite(predicted_labels, file = 'C:/Users/JK137644/Desktop/KNN_#_PREDICTED_LABELS.txt') 


?as.list()
writeLines(unlist(lapply(predicted_labels, paste, collapse=",")), "preds_knn3.txt")



writeLines(unlist(lapply(predicted_labels2, paste, collapse=",")), "preds_knn3_a.txt")
writeLines(unlist(lapply(predicted_labels3, paste, collapse=",")), "preds_knn3_b.txt")





knnIndex = knn_test_2$index

preds = apply(knnIndex, 1, function(x, labels) {pred = labels[x];
pred = apply(pred, 2, sum)}, labels)
preds = t(preds)
predicted_labels2 = apply(preds, 1, function(x) names(which(x >= 2)))
predicted_labels3 = apply(preds, 1, function(x) names(which(x >= 3)))
head(predicted_labels2)
